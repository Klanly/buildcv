name: pnnxbuild
on:
  workflow_dispatch:
    inputs:
      opencv-version:
        description: pnnxbuild
        required: true
        default: 4.5.2

jobs:

  ubuntu:
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: pnnx-ubuntu
    steps:
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        wget -O libtorch.zip https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.12.0%2Bcpu.zip
        unzip -q libtorch.zip
    - name: torchvision
      run: |
        wget https://github.com/pytorch/vision/archive/refs/tags/v0.13.0.zip -O vision-0.11.1.zip
        unzip -q vision-0.11.1.zip
        cd vision-0.13.0
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.11.1-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.11.1-no-python.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        cp libtorch/lib/*.so ${{ env.PACKAGENAME }}
        cp libtorch/lib/libgomp*.so* ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  
